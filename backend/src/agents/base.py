"""Base class for all agents in the system.

This module provides an abstract base class that all agents must inherit from,
ensuring a consistent interface and behavior across different agent types.
"""

from __future__ import annotations

from abc import ABC, abstractmethod
from dataclasses import dataclass
from enum import Enum
from pathlib import Path
from typing import Any, Dict, Optional


class AgentStatus(str, Enum):
    """Agent execution status."""
    PENDING = "pending"
    PROCESSING = "processing"
    COMPLETED = "completed"
    FAILED = "failed"


@dataclass
class AgentResult:
    """Standard result format for all agents."""
    status: AgentStatus
    agent_name: str
    output_dir: Optional[str] = None
    result_data: Optional[Dict[str, Any]] = None
    error: Optional[str] = None
    metadata: Optional[Dict[str, Any]] = None


class BaseAgent(ABC):
    """Abstract base class for all agents.

    All agents must implement:
    1. validate_inputs() - Check if required inputs are valid
    2. run() - Execute the agent's main logic
    3. get_output_files() - Return list of generated files

    Attributes:
        name: Unique identifier for this agent
        description: Human-readable description of agent's purpose
        version: Agent version for tracking changes
    """

    def __init__(
        self,
        name: str,
        description: str = "",
        version: str = "1.0.0"
    ):
        """Initialize agent with metadata.

        Args:
            name: Unique agent identifier (e.g., "statistician")
            description: Brief description of agent functionality
            version: Semantic version string
        """
        self.name = name
        self.description = description
        self.version = version

    @abstractmethod
    async def validate_inputs(self, **kwargs) -> tuple[bool, Optional[str]]:
        """Validate input parameters before execution.

        Args:
            **kwargs: Agent-specific input parameters

        Returns:
            Tuple of (is_valid, error_message)
            - is_valid: True if inputs are valid, False otherwise
            - error_message: None if valid, error description if invalid
        """
        pass

    @abstractmethod
    async def run(self, **kwargs) -> AgentResult:
        """Execute the agent's main logic.

        Args:
            **kwargs: Agent-specific parameters

        Returns:
            AgentResult with status, output_dir, and result data
        """
        pass

    @abstractmethod
    def get_output_files(self, output_dir: str) -> list[Path]:
        """Get list of files generated by this agent.

        Args:
            output_dir: Directory where agent saved outputs

        Returns:
            List of Path objects for generated files
        """
        pass

    def get_metadata(self) -> Dict[str, Any]:
        """Get agent metadata.

        Returns:
            Dictionary with agent name, description, version
        """
        return {
            "name": self.name,
            "description": self.description,
            "version": self.version
        }
