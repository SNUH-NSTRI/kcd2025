"""Utility functions for Statistician Agent.

This module provides helper functions for file path construction,
medication name sanitization, and input validation.
"""

from __future__ import annotations

import re
from pathlib import Path
from typing import Optional

from rwe_api.config import settings  # Centralized config


def sanitize_medication_name(medication: str) -> str:
    """Convert medication name to folder-safe format.

    Examples:
        >>> sanitize_medication_name("hydrocortisone na succ.")
        'hydrocortisonenasucc'
        >>> sanitize_medication_name("Dexamethasone")
        'dexamethasone'
        >>> sanitize_medication_name("methyl-prednisolone 40mg")
        'methylprednisolone40mg'

    Args:
        medication: Original medication name (may contain spaces, dots, hyphens)

    Returns:
        Sanitized medication name (lowercase, no spaces/punctuation)
    """
    # Convert to lowercase
    clean = medication.lower()

    # Remove common punctuation and whitespace
    clean = clean.replace(" ", "")
    clean = clean.replace(".", "")
    clean = clean.replace("-", "")
    clean = clean.replace("_", "")

    # Remove any remaining non-alphanumeric characters
    clean = re.sub(r'[^a-z0-9]', '', clean)

    return clean


def construct_cohort_path(
    nct_id: str,
    medication: str,
    workspace_root: Optional[str | Path] = None
) -> Path:
    """Construct file path to cohort data with baseline characteristics.

    This function builds the expected file path based on NCT ID and medication name,
    following the project directory structure:
        project/{NCT_ID}/cohorts/{sanitized_med}/{NCT_ID}_{sanitized_med}_v3.1_with_baseline.csv

    Args:
        nct_id: NCT trial identifier (e.g., "NCT03389555")
        medication: Medication name (will be sanitized)
        workspace_root: Optional workspace root path. Defaults to WORKSPACE_ROOT env var or "./project"

    Returns:
        Path object pointing to the cohort CSV file

    Raises:
        FileNotFoundError: If the cohort file does not exist
        ValueError: If NCT ID format is invalid

    Example:
        >>> path = construct_cohort_path("NCT03389555", "hydrocortisone na succ.")
        >>> print(path)
        project/NCT03389555/cohorts/hydrocortisonenasucc/NCT03389555_hydrocortisonenasucc_v3.1_with_baseline.csv
    """
    # Validate NCT ID format
    if not nct_id or not nct_id.startswith("NCT"):
        raise ValueError(f"Invalid NCT ID format: {nct_id}. Expected format: NCT########")

    # Get workspace root (ALWAYS uses settings which loads .env)
    if workspace_root is None:
        workspace_root = settings.WORKSPACE_ROOT
    else:
        workspace_root = Path(workspace_root)

    # Sanitize medication name
    med_folder = sanitize_medication_name(medication)

    # Construct path
    cohort_dir = workspace_root / nct_id / "cohorts" / med_folder
    cohort_file = cohort_dir / f"{nct_id}_{med_folder}_v3.1_with_baseline.csv"

    # Validate file exists
    if not cohort_file.exists():
        raise FileNotFoundError(
            f"Cohort file not found: {cohort_file}\n\n"
            f"This file should be generated by Phase 1-3 of the pipeline:\n"
            f"  1. Phase 1: Generate NCT SQL template\n"
            f"  2. Phase 2: Extract cohort data (creates {nct_id}_{med_folder}_v3.1.csv)\n"
            f"  3. Phase 3: Merge baseline characteristics (creates *_with_baseline.csv)\n\n"
            f"Please complete these phases before running the Statistician Agent.\n"
            f"Expected directory: {cohort_dir}\n"
            f"Available files:\n{list_available_cohorts(workspace_root, nct_id)}"
        )

    return cohort_file


def construct_output_dir(
    nct_id: str,
    medication: str,
    workspace_root: Optional[str | Path] = None
) -> Path:
    """Construct output directory path for analysis results.

    Args:
        nct_id: NCT trial identifier
        medication: Medication name
        workspace_root: Optional workspace root

    Returns:
        Path to outputs/ directory
    """
    if workspace_root is None:
        workspace_root = settings.WORKSPACE_ROOT
    else:
        workspace_root = Path(workspace_root)

    med_folder = sanitize_medication_name(medication)
    output_dir = workspace_root / nct_id / "cohorts" / med_folder / "outputs"

    # Create directory if it doesn't exist
    output_dir.mkdir(parents=True, exist_ok=True)

    return output_dir


def list_available_cohorts(workspace_root: Path, nct_id: str) -> str:
    """List available cohort files for a given NCT ID.

    Args:
        workspace_root: Workspace root directory
        nct_id: NCT trial identifier

    Returns:
        Formatted string listing available cohort files
    """
    cohorts_dir = workspace_root / nct_id / "cohorts"

    if not cohorts_dir.exists():
        return f"  (No cohorts directory found at {cohorts_dir})"

    medications = []
    for med_dir in cohorts_dir.iterdir():
        if med_dir.is_dir():
            csv_files = list(med_dir.glob("*.csv"))
            if csv_files:
                medications.append(f"  - {med_dir.name}: {len(csv_files)} CSV files")

    if medications:
        return "\n".join(medications)
    else:
        return "  (No medication cohorts found)"


def validate_nct_id(nct_id: str) -> tuple[bool, Optional[str]]:
    """Validate NCT ID format.

    Args:
        nct_id: NCT identifier to validate

    Returns:
        Tuple of (is_valid, error_message)
    """
    if not nct_id:
        return False, "NCT ID cannot be empty"

    if not nct_id.startswith("NCT"):
        return False, f"NCT ID must start with 'NCT', got: {nct_id}"

    if not re.match(r'^NCT\d{8}$', nct_id):
        return False, f"NCT ID must be in format NCT######## (8 digits), got: {nct_id}"

    return True, None


def validate_medication(medication: str) -> tuple[bool, Optional[str]]:
    """Validate medication name.

    Args:
        medication: Medication name to validate

    Returns:
        Tuple of (is_valid, error_message)
    """
    if not medication or not medication.strip():
        return False, "Medication name cannot be empty"

    # Check if sanitized name is valid
    sanitized = sanitize_medication_name(medication)
    if not sanitized:
        return False, f"Medication name '{medication}' results in empty string after sanitization"

    if len(sanitized) < 3:
        return False, f"Medication name too short after sanitization: '{sanitized}'"

    return True, None
